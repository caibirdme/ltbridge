// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceByIdResponse {
    #[prost(message, optional, tag = "1")]
    pub trace: ::core::option::Option<Trace>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<TraceByIdMetrics>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TraceByIdMetrics {}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trace {
    #[prost(message, repeated, tag = "1")]
    pub batches: ::prost::alloc::vec::Vec<
        opentelemetry_proto::tonic::trace::v1::ResourceSpans,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRequest {
    #[prost(map = "string, string", tag = "1")]
    pub tags: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(uint32, tag = "2")]
    pub min_duration_ms: u32,
    #[prost(uint32, tag = "3")]
    pub max_duration_ms: u32,
    #[prost(uint32, tag = "4")]
    pub limit: u32,
    #[prost(uint32, tag = "5")]
    pub start: u32,
    #[prost(uint32, tag = "6")]
    pub end: u32,
    #[prost(string, tag = "8")]
    pub query: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResponse {
    #[prost(message, repeated, tag = "1")]
    pub traces: ::prost::alloc::vec::Vec<TraceSearchMetadata>,
    #[prost(message, optional, tag = "2")]
    pub metrics: ::core::option::Option<SearchMetrics>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceSearchMetadata {
    #[prost(string, tag = "1")]
    #[serde(rename = "traceID")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub root_service_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub root_trace_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    #[serde(with = "crate::utils::serde::jsonstr")]
    pub start_time_unix_nano: u64,
    #[prost(uint32, tag = "5")]
    pub duration_ms: u32,
    /// deprecated. use SpanSets field below
    #[prost(message, optional, tag = "6")]
    pub span_set: ::core::option::Option<SpanSet>,
    #[prost(message, repeated, tag = "7")]
    pub span_sets: ::prost::alloc::vec::Vec<SpanSet>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpanSet {
    #[prost(message, repeated, tag = "1")]
    pub spans: ::prost::alloc::vec::Vec<Span>,
    #[prost(uint32, tag = "2")]
    pub matched: u32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Span {
    #[prost(string, tag = "1")]
    #[serde(rename = "spanID")]
    pub span_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    #[serde(with = "crate::utils::serde::jsonstr")]
    pub start_time_unix_nano: u64,
    #[prost(uint64, tag = "4")]
    #[serde(with = "crate::utils::serde::jsonstr")]
    pub duration_nanos: u64,
    #[prost(message, repeated, tag = "5")]
    pub attributes: ::prost::alloc::vec::Vec<
        opentelemetry_proto::tonic::common::v1::KeyValue,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SearchMetrics {
    #[prost(uint32, tag = "1")]
    pub inspected_traces: u32,
    #[prost(uint64, tag = "2")]
    #[serde(with = "crate::utils::serde::jsonstr")]
    pub inspected_bytes: u64,
    #[prost(uint32, tag = "3")]
    pub total_blocks: u32,
    #[prost(uint32, tag = "4")]
    pub completed_jobs: u32,
    #[prost(uint32, tag = "5")]
    pub total_jobs: u32,
    #[prost(uint64, tag = "6")]
    #[serde(with = "crate::utils::serde::jsonstr")]
    pub total_block_bytes: u64,
}
